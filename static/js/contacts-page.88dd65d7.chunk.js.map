{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","redux/contacts/contact-operations.js","redux/contacts/contacts-selectors.js","Components/ContactList.js","Components/Filter.js","Components/AddForm.js","pages/Contacts.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","axios","defaults","baseURL","getContact","state","phonebook","contacts","getFilter","visibleContact","createSelector","normalizeFilter","toLowerCase","contact","name","includes","connect","visibleContacts","selectors","dispatch","deleteContact","actions","delete","then","catch","error","operations","className","map","type","onClick","value","changeFilter","action","onChange","e","currentTarget","Form","updateContacts","preventDefault","checkDuplicates","alert","newContact","shortid","props","addContact","changeHadler","setState","this","onSubmit","pattern","title","required","Component","post","data","Contacts","fetchContacts"],"mappings":"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","file":"static/js/contacts-page.88dd65d7.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","import * as actions from './contacts-actions';\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n   dispatch(actions.fetchContactRequest());\r\n\r\n   axios\r\n      .get('/contacts')\r\n      .then(({ data }) => {\r\n         dispatch(actions.fetchContactSucces(data));\r\n      })\r\n      .catch(error => dispatch(actions.fetchContactError(error)));\r\n};\r\n\r\nexport const addContact = contact => dispatch => {\r\n   dispatch(actions.addContactRequest());\r\n\r\n   axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(actions.addContactSucces(data)))\r\n      .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n   dispatch(actions.deleteContactRequest());\r\n\r\n   axios\r\n      .delete(`/contacts/${id}`)\r\n      .then(() => dispatch(actions.deleteContactSucces(id)))\r\n      .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nexport const getContact = state => state.phonebook.contacts;\r\nexport const getFilter = state => state.phonebook.filter;\r\nexport const visibleContact = createSelector(\r\n   [getContact, getFilter],\r\n   (contacts, filter) => {\r\n      const normalizeFilter = filter.toLowerCase();\r\n\r\n      return contacts.filter(contact =>\r\n         contact.name.toLowerCase().includes(normalizeFilter),\r\n      );\r\n   },\r\n);\r\n","import { connect } from 'react-redux';\r\nimport * as operations from '../redux/contacts/contact-operations';\r\nimport * as selectors from '../redux/contacts/contacts-selectors.js';\r\n\r\nconst ContactList = ({ visibleContacts, deleteContact }) => {\r\n   return (\r\n      <ul className=\"phonebook__list\">\r\n         {visibleContacts.map(contact => (\r\n            <li key={contact.id} className=\"pnonebook__listItem\">\r\n               <p>\r\n                  {contact.name} : {contact.number}\r\n               </p>\r\n               <button type=\"button\" onClick={() => deleteContact(contact.id)}>\r\n                  Delete contact\r\n               </button>\r\n            </li>\r\n         ))}\r\n      </ul>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      visibleContacts: selectors.visibleContact(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      deleteContact: id => dispatch(operations.deleteContact(id)),\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { connect } from 'react-redux';\r\nimport * as action from '../redux/contacts/contacts-actions';\r\nimport * as selectors from '../redux/contacts/contacts-selectors.js';\r\n\r\nconst Filter = ({ value, changeFilter }) => {\r\n   return (\r\n      <label className=\"phonebook__filter\">\r\n         Find contacts by name\r\n         <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={e => changeFilter(e.currentTarget.value)}\r\n         />\r\n      </label>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      value: selectors.getFilter(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      changeFilter: value => dispatch(action.changeFilter(value)),\r\n   };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as selectors from '../redux/contacts/contacts-selectors.js';\r\nimport * as operation from '../redux/contacts/contact-operations';\r\nimport shortid from 'shortid';\r\n\r\nclass Form extends Component {\r\n   state = {\r\n      name: '',\r\n      number: '',\r\n   };\r\n\r\n   updateContacts = e => {\r\n      e.preventDefault();\r\n      const { name, number } = this.state;\r\n      if (this.checkDuplicates(name)) {\r\n         alert(`${name} уже в списке`);\r\n         return;\r\n      }\r\n      const newContact = {\r\n         name,\r\n         number,\r\n         id: shortid.generate(),\r\n      };\r\n      this.props.addContact(newContact);\r\n      this.reset();\r\n   };\r\n\r\n   checkDuplicates = name => {\r\n      const currentContactsName = this.props.contacts.map(\r\n         contact => contact.name,\r\n      );\r\n      return currentContactsName.includes(name);\r\n   };\r\n\r\n   changeHadler = e => {\r\n      this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n   };\r\n   reset() {\r\n      this.setState({ name: '', number: '' });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <form onSubmit={this.updateContacts} className=\"phonebook_form\">\r\n            <div className=\"phonebook__inputarea\">\r\n               <label>\r\n                  <h2>Name</h2>\r\n                  <input\r\n                     value={this.state.name}\r\n                     type=\"text\"\r\n                     name=\"name\"\r\n                     onChange={this.changeHadler}\r\n                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                     required\r\n                  />\r\n               </label>\r\n\r\n               <label>\r\n                  <h2>Number</h2>\r\n                  <input\r\n                     value={this.state.number}\r\n                     type=\"tel\"\r\n                     name=\"number\"\r\n                     onChange={this.changeHadler}\r\n                     pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                     title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                     required\r\n                  />\r\n               </label>\r\n            </div>\r\n            <button type=\"submit\" className=\"phonebook__addButton\">\r\n               Add contact\r\n            </button>\r\n         </form>\r\n      );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      contacts: selectors.getContact(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      addContact: newContact => dispatch(operation.addContact(newContact)),\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../Components/styles.css';\r\nimport ContactList from '../Components/ContactList';\r\nimport Filter from '../Components/Filter';\r\nimport Form from '../Components/AddForm';\r\nimport * as operations from '../redux/contacts/contact-operations';\r\n\r\nclass Contacts extends Component {\r\n   state = {};\r\n   componentDidMount() {\r\n      this.props.fetchContacts();\r\n   }\r\n   render() {\r\n      return (\r\n         <div className=\"phonebook\">\r\n            <h1 className=\"phonebook__titel\"> Phonebook</h1>\r\n            <Form />\r\n            <h2> Contacts List</h2>\r\n            <Filter />\r\n            <ContactList />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      fetchContacts: () => dispatch(operations.fetchContacts()),\r\n   };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Contacts);\r\n"],"sourceRoot":""}