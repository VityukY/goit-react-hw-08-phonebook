{"version":3,"sources":["redux/contacts/contact-operations.js","redux/contacts/contacts-selectors.js","Components/ContactList.js","Components/Filter.js","Components/AddForm.js","pages/Contacts.js"],"names":["axios","defaults","baseURL","getContact","state","phonebook","contacts","getFilter","filter","visibleContact","createSelector","normalizeFilter","toLowerCase","contact","name","includes","connect","visibleContacts","selectors","dispatch","deleteContact","id","actions","delete","then","catch","error","operations","className","map","number","type","onClick","value","changeFilter","action","onChange","e","currentTarget","Form","updateContacts","preventDefault","checkDuplicates","alert","newContact","shortid","generate","props","addContact","reset","changeHadler","setState","this","onSubmit","pattern","title","required","Component","post","data","Contacts","fetchContacts","get"],"mappings":"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","file":"static/js/contacts-page.7445ddc8.chunk.js","sourcesContent":["import * as actions from './contacts-actions';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n   dispatch(actions.fetchContactRequest());\r\n\r\n   axios\r\n      .get('/contacts')\r\n      .then(({ data }) => dispatch(actions.fetchContactSucces(data)))\r\n      .catch(error => dispatch(actions.fetchContactError(error)));\r\n};\r\n\r\nexport const addContact = contact => dispatch => {\r\n   dispatch(actions.addContactRequest());\r\n\r\n   axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(actions.addContactSucces(data)))\r\n      .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n   dispatch(actions.deleteContactRequest());\r\n\r\n   axios\r\n      .delete(`/contacts/${id}`)\r\n      .then(() => dispatch(actions.deleteContactSucces(id)))\r\n      .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nexport const getContact = state => state.phonebook.contacts;\r\nexport const getFilter = state => state.phonebook.filter;\r\nexport const visibleContact = createSelector(\r\n   [getContact, getFilter],\r\n   (contacts, filter) => {\r\n      const normalizeFilter = filter.toLowerCase();\r\n\r\n      return contacts.filter(contact =>\r\n         contact.name.toLowerCase().includes(normalizeFilter),\r\n      );\r\n   },\r\n);\r\n","import { connect } from 'react-redux';\r\nimport * as operations from '../redux/contacts/contact-operations';\r\nimport * as selectors from '../redux/contacts/contacts-selectors.js';\r\n\r\nconst ContactList = ({ visibleContacts, deleteContact }) => {\r\n   return (\r\n      <ul className=\"phonebook__list\">\r\n         {visibleContacts.map(contact => (\r\n            <li key={contact.id} className=\"pnonebook__listItem\">\r\n               <p>\r\n                  {contact.name} : {contact.number}\r\n               </p>\r\n               <button type=\"button\" onClick={() => deleteContact(contact.id)}>\r\n                  Delete contact\r\n               </button>\r\n            </li>\r\n         ))}\r\n      </ul>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      visibleContacts: selectors.visibleContact(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      deleteContact: id => dispatch(operations.deleteContact(id)),\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { connect } from 'react-redux';\r\nimport * as action from '../redux/contacts/contacts-actions';\r\nimport * as selectors from '../redux/contacts/contacts-selectors.js';\r\n\r\nconst Filter = ({ value, changeFilter }) => {\r\n   return (\r\n      <label className=\"phonebook__filter\">\r\n         Find contacts by name\r\n         <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={e => changeFilter(e.currentTarget.value)}\r\n         />\r\n      </label>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      value: selectors.getFilter(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      changeFilter: value => dispatch(action.changeFilter(value)),\r\n   };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as selectors from '../redux/contacts/contacts-selectors.js';\r\nimport * as operation from '../redux/contacts/contact-operations';\r\nimport shortid from 'shortid';\r\n\r\nclass Form extends Component {\r\n   state = {\r\n      name: '',\r\n      number: '',\r\n   };\r\n\r\n   updateContacts = e => {\r\n      e.preventDefault();\r\n      const { name, number } = this.state;\r\n      if (this.checkDuplicates(name)) {\r\n         alert(`${name} уже в списке`);\r\n         return;\r\n      }\r\n      const newContact = {\r\n         name,\r\n         number,\r\n         id: shortid.generate(),\r\n      };\r\n      this.props.addContact(newContact);\r\n      this.reset();\r\n   };\r\n\r\n   checkDuplicates = name => {\r\n      const currentContactsName = this.props.contacts.map(\r\n         contact => contact.name,\r\n      );\r\n      return currentContactsName.includes(name);\r\n   };\r\n\r\n   changeHadler = e => {\r\n      this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n   };\r\n   reset() {\r\n      this.setState({ name: '', number: '' });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <form onSubmit={this.updateContacts} className=\"phonebook_form\">\r\n            <div className=\"phonebook__inputarea\">\r\n               <label>\r\n                  <h2>Name</h2>\r\n                  <input\r\n                     value={this.state.name}\r\n                     type=\"text\"\r\n                     name=\"name\"\r\n                     onChange={this.changeHadler}\r\n                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                     required\r\n                  />\r\n               </label>\r\n\r\n               <label>\r\n                  <h2>Number</h2>\r\n                  <input\r\n                     value={this.state.number}\r\n                     type=\"tel\"\r\n                     name=\"number\"\r\n                     onChange={this.changeHadler}\r\n                     pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                     title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                     required\r\n                  />\r\n               </label>\r\n            </div>\r\n            <button type=\"submit\" className=\"phonebook__addButton\">\r\n               Add contact\r\n            </button>\r\n         </form>\r\n      );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      contacts: selectors.getContact(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      addContact: newContact => dispatch(operation.addContact(newContact)),\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../Components/styles.css';\r\nimport ContactList from '../Components/ContactList';\r\nimport Filter from '../Components/Filter';\r\nimport Form from '../Components/AddForm';\r\nimport * as operations from '../redux/contacts/contact-operations';\r\n\r\nclass Contacts extends Component {\r\n   state = {};\r\n   componentDidMount() {\r\n      this.props.fetchContacts();\r\n   }\r\n   render() {\r\n      return (\r\n         <div className=\"phonebook\">\r\n            <h1 className=\"phonebook__titel\"> Phonebook</h1>\r\n            <Form />\r\n            <h2> Contacts List</h2>\r\n            <Filter />\r\n            <ContactList />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      fetchContacts: () => dispatch(operations.fetchContacts()),\r\n   };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Contacts);\r\n"],"sourceRoot":""}