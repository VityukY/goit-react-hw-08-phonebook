{"version":3,"sources":["routs.js","redux/auth/auth-selectors.js","redux/contacts/contacts-actions.js","redux/auth/auth-operations.js","redux/auth/auth-actions.js","Components/UnregisteredMenu.js","Components/LogoutBtn.js","redux/contacts/contact-reducer.js","redux/auth/auth-reducer.js","redux/store.js","Components/registeredMenu.js","Components/Navigation.js","Components/AppBar.js","Components/PrivateRoute.js","Components/PublicRoute.js","App.js","index.js"],"names":["routes","home","contacts","registarion","login","isAuthenticated","state","auth","isLogin","getUserName","user","name","fetchContactRequest","createAction","fetchContactSucces","fetchContactError","addContactRequest","addContactSucces","addContactError","deleteContactRequest","deleteContactSucces","deleteContactError","changeFilter","axios","defaults","baseURL","token","headers","common","Authorization","registration","newUser","dispatch","a","actions","post","respons","data","message","logout","getCurrentUserUser","getState","persistedToken","get","registrationRequest","registrationSucces","registrationError","loginRequest","loginSucces","loginError","logoutRequest","logoutSucces","logoutError","getCurrentUserRequest","getCurrentUserSucces","getCurrentUserError","UnregistredMenu","exact","to","className","activeClassName","mapDispatchToProps","operations","connect","type","onClick","contactsReducer","createReducer","_","payload","filter","contact","id","filterReducer","errorReducer","console","log","complexContactsReducer","combineReducers","error","initialState","email","complexAuthReducer","persistConfig","key","storage","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","phonebook","persistReducer","devTools","process","persistor","persistStore","userName","LogoutBtn","UnregisteredMenu","AppBar","Component","component","redirectTo","routeProps","render","props","restricted","Home","lazy","Contacts","Registarion","Login","App","this","getCurrentUser","fallback","path","ReactDOM","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.15aaea01.chunk.js","sourcesContent":["const routes = {\r\n   home: '/home',\r\n   contacts: '/contacts',\r\n   registarion: '/registarion',\r\n   login: '/login',\r\n};\r\n\r\nexport default routes;\r\n","export const isAuthenticated = state => {\r\n   return state.auth.isLogin;\r\n};\r\n\r\nexport const getUserName = state => {\r\n   return state.auth.user.name;\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchRequest');\r\nexport const fetchContactSucces = createAction('contacts/fetchSucces');\r\nexport const fetchContactError = createAction('contacts/fetchError');\r\n\r\nexport const addContactRequest = createAction('contacts/addRequest');\r\nexport const addContactSucces = createAction('contacts/addSucces');\r\nexport const addContactError = createAction('contacts/addError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteRequest');\r\nexport const deleteContactSucces = createAction('contacts/deleteSucces');\r\nexport const deleteContactError = createAction('contacts/deleteError');\r\n\r\nexport const changeFilter = createAction('contacts/cahngeFilter');\r\n","import * as actions from './auth-actions';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n//aths@mail.com\r\n//qweqwe123\r\nconst token = {\r\n   set(token) {\r\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n   },\r\n   unset() {\r\n      axios.defaults.headers.common.Authorization = '';\r\n   },\r\n};\r\n\r\nexport const registration = newUser => async dispatch => {\r\n   dispatch(actions.registrationRequest());\r\n   try {\r\n      const respons = await axios.post('/users/signup', newUser);\r\n      token.set(respons.data.token);\r\n      dispatch(actions.registrationSucces(respons.data));\r\n   } catch (error) {\r\n      dispatch(actions.registrationError(error.message));\r\n   }\r\n};\r\n\r\nexport const login = user => async dispatch => {\r\n   dispatch(actions.loginRequest());\r\n   try {\r\n      const respons = await axios.post('/users/login', user);\r\n      token.set(respons.data.token);\r\n      dispatch(actions.loginSucces(respons.data));\r\n   } catch (error) {\r\n      dispatch(actions.loginError(error.message));\r\n   }\r\n};\r\n\r\nexport const logout = () => async dispatch => {\r\n   dispatch(actions.logoutRequest());\r\n   try {\r\n      const respons = await axios.post('/users/logout');\r\n      token.unset();\r\n      dispatch(actions.logoutSucces(respons.data));\r\n   } catch (error) {\r\n      dispatch(actions.logoutError(error.message));\r\n   }\r\n};\r\n\r\nexport const getCurrentUserUser = () => async (dispatch, getState) => {\r\n   const {\r\n      auth: { token: persistedToken },\r\n   } = getState();\r\n\r\n   if (!persistedToken) {\r\n      return;\r\n   }\r\n   token.set(persistedToken);\r\n   dispatch(actions.getCurrentUserRequest());\r\n   try {\r\n      const respons = await axios.get('/users/current');\r\n\r\n      dispatch(actions.getCurrentUserSucces(respons.data));\r\n   } catch (error) {\r\n      dispatch(actions.getCurrentUserError(error.message));\r\n   }\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const registrationRequest = createAction('auth/registrationRequest');\r\nexport const registrationSucces = createAction('auth/registrationSucces');\r\nexport const registrationError = createAction('auth/registrationError');\r\n\r\nexport const loginRequest = createAction('auth/loginRequest');\r\nexport const loginSucces = createAction('auth/loginSucces');\r\nexport const loginError = createAction('auth/loginError');\r\n\r\nexport const logoutRequest = createAction('auth/logoutRequest');\r\nexport const logoutSucces = createAction('auth/logoutSucces');\r\nexport const logoutError = createAction('auth/logoutError');\r\n\r\nexport const getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nexport const getCurrentUserSucces = createAction('auth/getCurrentUserSucces');\r\nexport const getCurrentUserError = createAction('auth/getCurrentUserError');\r\n","import { NavLink } from 'react-router-dom';\r\nimport routes from '../routs';\r\n\r\nconst UnregistredMenu = () => {\r\n   return (\r\n      <>\r\n         <NavLink exact to={routes.registarion} className=\"\" activeClassName=\"\">\r\n            Registarion\r\n         </NavLink>\r\n         <NavLink exact to={routes.login} className=\"\" activeClassName=\"\">\r\n            Login\r\n         </NavLink>\r\n      </>\r\n   );\r\n};\r\nexport default UnregistredMenu;\r\n","import { connect } from 'react-redux';\r\nimport * as operations from '../redux/auth/auth-operations';\r\n\r\nconst LogoutBtn = ({ logout }) => {\r\n   return (\r\n      <button type=\"button\" onClick={() => logout()}>\r\n         Logout\r\n      </button>\r\n   );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n   logout: operations.logout,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(LogoutBtn);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n   [actions.fetchContactSucces]: (_, { payload }) => payload,\r\n   [actions.addContactSucces]: (state, { payload }) => [...state, payload],\r\n   [actions.deleteContactSucces]: (state, { payload }) =>\r\n      state.filter(contact => contact.id !== payload),\r\n});\r\nconst filterReducer = createReducer('', {\r\n   [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst errorReducer = createReducer('', {\r\n   [actions.fetchContactError]: (_, { payload }) =>\r\n      console.log('payload', payload),\r\n   [actions.addContactError]: (_, { payload }) =>\r\n      console.log('payload', payload),\r\n   [actions.deleteContactError]: (_, { payload }) =>\r\n      console.log('payload', payload),\r\n});\r\nconst complexContactsReducer = combineReducers({\r\n   contacts: contactsReducer,\r\n   filter: filterReducer,\r\n   error: errorReducer,\r\n});\r\n\r\nexport default complexContactsReducer;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './auth-actions';\r\nconst initialState = {\r\n   name: null,\r\n   email: null,\r\n};\r\nconst user = createReducer(\r\n   {\r\n      name: null,\r\n      email: null,\r\n   },\r\n   {\r\n      [actions.registrationSucces]: (_, { payload }) => payload.user,\r\n      [actions.loginSucces]: (_, { payload }) => payload.user,\r\n      [actions.getCurrentUserSucces]: (_, { payload }) => payload,\r\n      [actions.loginSucces]: () => initialState,\r\n   },\r\n);\r\n\r\nconst token = createReducer('', {\r\n   [actions.registrationSucces]: (_, { payload }) => payload.token,\r\n   [actions.loginSucces]: (_, { payload }) => payload.token,\r\n\r\n   [actions.logoutSucces]: () => '',\r\n});\r\n\r\nconst isLogin = createReducer(false, {\r\n   [actions.registrationSucces]: () => true,\r\n   [actions.loginSucces]: () => true,\r\n   [actions.getCurrentUserSucces]: () => true,\r\n   [actions.logoutSucces]: () => false,\r\n});\r\nconst error = createReducer('', {\r\n   [actions.registrationError]: (_, { payload }) => payload,\r\n   [actions.loginError]: (_, { payload }) => payload,\r\n   [actions.logoutError]: (_, { payload }) => payload,\r\n   [actions.getCurrentUserError]: (_, { payload }) => payload,\r\n});\r\nconst complexAuthReducer = combineReducers({\r\n   user,\r\n   token,\r\n   isLogin,\r\n   error,\r\n});\r\nexport default complexAuthReducer;\r\n","import storage from 'redux-persist/lib/storage';\r\nimport {\r\n   persistStore,\r\n   persistReducer,\r\n   FLUSH,\r\n   REHYDRATE,\r\n   PAUSE,\r\n   PERSIST,\r\n   PURGE,\r\n   REGISTER,\r\n} from 'redux-persist';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport complexContactsReducer from './contacts/contact-reducer';\r\nimport complexAuthReducer from './auth/auth-reducer';\r\n\r\nconst persistConfig = {\r\n   key: 'auth', //название хранителя\r\n   storage,\r\n   whitelist: ['token'],\r\n};\r\n\r\nconst middleware = [\r\n   ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n   }),\r\n];\r\n\r\nexport const store = configureStore({\r\n   reducer: {\r\n      phonebook: complexContactsReducer,\r\n      auth: persistReducer(persistConfig, complexAuthReducer),\r\n   },\r\n   middleware,\r\n   devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport const persistor = persistStore(store);\r\n","import { connect } from 'react-redux';\r\nimport LogoutBtn from './LogoutBtn';\r\nimport { getUserName } from '../redux/auth/auth-selectors';\r\n\r\nconst RegistredMenu = ({ userName }) => {\r\n   return (\r\n      <>\r\n         <p>{`Привет ${userName}`} </p>\r\n\r\n         <LogoutBtn />\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n   userName: getUserName(state),\r\n});\r\nexport default connect(mapStateToProps)(RegistredMenu);\r\n","import { NavLink } from 'react-router-dom';\r\nimport routes from '../routs';\r\nimport { connect } from 'react-redux';\r\nimport { isAuthenticated } from '../redux/auth/auth-selectors';\r\nimport UnregisteredMenu from './UnregisteredMenu';\r\nimport RegistredMenu from './registeredMenu';\r\n\r\nconst Navigation = ({ isLogin }) => {\r\n   return (\r\n      <nav className=\"linkList\">\r\n         <NavLink to={routes.home} className=\"\" activeClassName=\"\">\r\n            Home\r\n         </NavLink>\r\n         <NavLink exact to={routes.contacts} className=\"\" activeClassName=\"\">\r\n            Contacts\r\n         </NavLink>\r\n         {isLogin ? <RegistredMenu /> : <UnregisteredMenu />}\r\n      </nav>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n   isLogin: isAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Navigation);\r\n","import Navigation from './Navigation';\r\n\r\nconst AppBar = () => {\r\n   return (\r\n      <header>\r\n         <Navigation />\r\n      </header>\r\n   );\r\n};\r\n\r\nexport default AppBar;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { isAuthenticated } from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({\r\n   component: Component,\r\n   isAuthenticated,\r\n   redirectTo,\r\n   ...routeProps\r\n}) => (\r\n   <Route\r\n      {...routeProps}\r\n      render={props =>\r\n         isAuthenticated ? (\r\n            <Component {...props} />\r\n         ) : (\r\n            <Redirect to={redirectTo} />\r\n         )\r\n      }\r\n   />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n   isAuthenticated: isAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { isAuthenticated } from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n   component: Component,\r\n   isAuthenticated,\r\n   redirectTo,\r\n   ...routeProps\r\n}) => (\r\n   <Route\r\n      {...routeProps}\r\n      render={props =>\r\n         isAuthenticated && routeProps.restricted ? (\r\n            <Redirect to={redirectTo} />\r\n         ) : (\r\n            <Component {...props} />\r\n         )\r\n      }\r\n   />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n   isAuthenticated: isAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import { Component, Suspense, lazy } from 'react';\r\nimport { Switch } from 'react-router-dom';\r\n//import * as operations from './redux/contacts/contact-operations';\r\nimport { connect } from 'react-redux';\r\nimport './Components/styles.css';\r\nimport routes from './routs';\r\nimport AppBar from './Components/AppBar';\r\nimport * as operations from './redux/auth/auth-operations';\r\nimport PrivateRoute from './Components/PrivateRoute';\r\nimport PublicRoute from './Components/PublicRoute';\r\n\r\nconst Home = lazy(() =>\r\n   import('./pages/Home' /* webpackChunkName: \"home-page\" */),\r\n);\r\nconst Contacts = lazy(() =>\r\n   import('./pages/Contacts' /* webpackChunkName: \"contacts-page\" */),\r\n);\r\nconst Registarion = lazy(() =>\r\n   import('./pages/Registarion' /* webpackChunkName: \"registration-page\" */),\r\n);\r\nconst Login = lazy(() =>\r\n   import('./pages/Login' /* webpackChunkName: \"login-page\" */),\r\n);\r\n\r\nclass App extends Component {\r\n   state = {};\r\n   componentDidMount() {\r\n      this.props.getCurrentUser();\r\n   }\r\n   render() {\r\n      return (\r\n         <>\r\n            <AppBar />\r\n            <Suspense fallback={<h1>грузимся...</h1>}>\r\n               <Switch>\r\n                  <PrivateRoute\r\n                     path={routes.contacts}\r\n                     redirectTo=\"/home\"\r\n                     component={Contacts}\r\n                  />\r\n                  <PublicRoute path={routes.home} component={Home} />\r\n                  <PublicRoute\r\n                     path={routes.registarion}\r\n                     restricted\r\n                     redirectTo=\"/contacts\"\r\n                     component={Registarion}\r\n                  />\r\n                  <PublicRoute\r\n                     path={routes.login}\r\n                     restricted\r\n                     redirectTo=\"/contacts\"\r\n                     component={Login}\r\n                  />\r\n               </Switch>\r\n            </Suspense>\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n   getCurrentUser: operations.getCurrentUserUser,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n//<Route path={routes.contacts} component={Contacts} />\r\n//                  <Route path={routes.registarion} component={Registarion} />\r\n//              <Route path={routes.login} component={Login} />\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport * as store from './redux/store';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <Provider store={store.store}>\n         <PersistGate loading={null} persistor={store.persistor}>\n            <BrowserRouter>\n               <App />\n            </BrowserRouter>\n         </PersistGate>\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById('root'),\n);\n"],"sourceRoot":""}