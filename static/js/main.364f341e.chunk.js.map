{"version":3,"sources":["redux/actions.js","redux/reducer.js","redux/store.js","redux/contact-operations.js","redux/contacts-selectors.js","Components/ContactList.js","Components/Filter.js","Components/addForm.js","App.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSucces","fetchContactError","addContactRequest","addContactSucces","addContactError","deleteContactRequest","deleteContactSucces","deleteContactError","changeFilter","contactsReducer","createReducer","actions","_","payload","state","filter","contact","id","filterReducer","errorReducer","console","log","complexContactsReducer","combineReducers","contacts","error","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","phonebook","devTools","process","axios","defaults","baseURL","getContact","getFilter","visibleContact","createSelector","normalizeFilter","toLowerCase","name","includes","connect","visibleContacts","selectors","dispatch","deleteContact","delete","then","catch","operations","className","map","number","type","onClick","value","action","onChange","e","currentTarget","Form","updateContacts","preventDefault","checkDuplicates","alert","newContact","shortid","generate","props","addContact","reset","changeHadler","setState","this","onSubmit","pattern","title","required","Component","post","data","App","fetchContacts","get","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.364f341e.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchRequest');\r\nexport const fetchContactSucces = createAction('contacts/fetchSucces');\r\nexport const fetchContactError = createAction('contacts/fetchError');\r\n\r\nexport const addContactRequest = createAction('contacts/addRequest');\r\nexport const addContactSucces = createAction('contacts/addSucces');\r\nexport const addContactError = createAction('contacts/addError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteRequest');\r\nexport const deleteContactSucces = createAction('contacts/deleteSucces');\r\nexport const deleteContactError = createAction('contacts/deleteError');\r\n\r\nexport const changeFilter = createAction('contacts/cahngeFilter');\r\n\r\n//export const addContact = createAction('contacts/addContact');\r\n//export const deleteContact = createAction('contacts/delete');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './actions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n   [actions.fetchContactSucces]: (_, { payload }) => payload,\r\n   [actions.addContactSucces]: (state, { payload }) => [...state, payload],\r\n   [actions.deleteContactSucces]: (state, { payload }) =>\r\n      state.filter(contact => contact.id !== payload),\r\n});\r\nconst filterReducer = createReducer('', {\r\n   [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst errorReducer = createReducer('', {\r\n   [actions.fetchContactError]: (_, { payload }) =>\r\n      console.log('payload', payload),\r\n   [actions.addContactError]: (_, { payload }) =>\r\n      console.log('payload', payload),\r\n   [actions.deleteContactError]: (_, { payload }) =>\r\n      console.log('payload', payload),\r\n});\r\nconst complexContactsReducer = combineReducers({\r\n   contacts: contactsReducer,\r\n   filter: filterReducer,\r\n   error: errorReducer,\r\n});\r\n\r\nexport default complexContactsReducer;\r\n","import {\r\n   FLUSH,\r\n   REHYDRATE,\r\n   PAUSE,\r\n   PERSIST,\r\n   PURGE,\r\n   REGISTER,\r\n} from 'redux-persist';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport complexContactsReducer from './reducer';\r\n\r\nconst middleware = [\r\n   ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n   }),\r\n];\r\n\r\nconst store = configureStore({\r\n   reducer: {\r\n      phonebook: complexContactsReducer,\r\n   },\r\n   middleware,\r\n   devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport default store;\r\n","import * as actions from './actions';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n   dispatch(actions.fetchContactRequest());\r\n\r\n   axios\r\n      .get('/contacts')\r\n      .then(({ data }) => dispatch(actions.fetchContactSucces(data)))\r\n      .catch(error => dispatch(actions.fetchContactError(error)));\r\n};\r\n\r\nexport const addContact = contact => dispatch => {\r\n   dispatch(actions.addContactRequest());\r\n\r\n   axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(actions.addContactSucces(data)))\r\n      .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n   dispatch(actions.deleteContactRequest());\r\n\r\n   axios\r\n      .delete(`/contacts/${id}`)\r\n      .then(() => dispatch(actions.deleteContactSucces(id)))\r\n      .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nexport const getContact = state => state.phonebook.contacts;\r\nexport const getFilter = state => state.phonebook.filter;\r\nexport const visibleContact = createSelector(\r\n   [getContact, getFilter],\r\n   (contacts, filter) => {\r\n      const normalizeFilter = filter.toLowerCase();\r\n\r\n      return contacts.filter(contact =>\r\n         contact.name.toLowerCase().includes(normalizeFilter),\r\n      );\r\n   },\r\n);\r\n","import { connect } from 'react-redux';\r\nimport * as operations from '../redux/contact-operations';\r\nimport * as selectors from '../redux/contacts-selectors.js';\r\n\r\nconst ContactList = ({ visibleContacts, deleteContact }) => {\r\n   return (\r\n      <ul className=\"phonebook__list\">\r\n         {visibleContacts.map(contact => (\r\n            <li key={contact.id} className=\"pnonebook__listItem\">\r\n               <p>\r\n                  {contact.name} : {contact.number}\r\n               </p>\r\n               <button type=\"button\" onClick={() => deleteContact(contact.id)}>\r\n                  Delete contact\r\n               </button>\r\n            </li>\r\n         ))}\r\n      </ul>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      visibleContacts: selectors.visibleContact(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      deleteContact: id => dispatch(operations.deleteContact(id)),\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { connect } from 'react-redux';\r\nimport * as action from '../redux/actions';\r\nimport * as selectors from '../redux/contacts-selectors.js';\r\n\r\nconst Filter = ({ value, changeFilter }) => {\r\n   return (\r\n      <label className=\"phonebook__filter\">\r\n         Find contacts by name\r\n         <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={e => changeFilter(e.currentTarget.value)}\r\n         />\r\n      </label>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      value: selectors.getFilter(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      changeFilter: value => dispatch(action.changeFilter(value)),\r\n   };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as selectors from '../redux/contacts-selectors.js';\r\nimport * as operation from '../redux/contact-operations';\r\nimport shortid from 'shortid';\r\n\r\nclass Form extends Component {\r\n   state = {\r\n      name: '',\r\n      number: '',\r\n   };\r\n\r\n   updateContacts = e => {\r\n      e.preventDefault();\r\n      const { name, number } = this.state;\r\n      if (this.checkDuplicates(name)) {\r\n         alert(`${name} уже в списке`);\r\n         return;\r\n      }\r\n      const newContact = {\r\n         name,\r\n         number,\r\n         id: shortid.generate(),\r\n      };\r\n      this.props.addContact(newContact);\r\n      this.reset();\r\n   };\r\n\r\n   checkDuplicates = name => {\r\n      const currentContactsName = this.props.contacts.map(\r\n         contact => contact.name,\r\n      );\r\n      return currentContactsName.includes(name);\r\n   };\r\n\r\n   changeHadler = e => {\r\n      this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n   };\r\n   reset() {\r\n      this.setState({ name: '', number: '' });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <form onSubmit={this.updateContacts} className=\"phonebook_form\">\r\n            <div className=\"phonebook__inputarea\">\r\n               <label>\r\n                  <h2>Name</h2>\r\n                  <input\r\n                     value={this.state.name}\r\n                     type=\"text\"\r\n                     name=\"name\"\r\n                     onChange={this.changeHadler}\r\n                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                     required\r\n                  />\r\n               </label>\r\n\r\n               <label>\r\n                  <h2>Number</h2>\r\n                  <input\r\n                     value={this.state.number}\r\n                     type=\"tel\"\r\n                     name=\"number\"\r\n                     onChange={this.changeHadler}\r\n                     pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                     title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                     required\r\n                  />\r\n               </label>\r\n            </div>\r\n            <button type=\"submit\" className=\"phonebook__addButton\">\r\n               Add contact\r\n            </button>\r\n         </form>\r\n      );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      contacts: selectors.getContact(state),\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      addContact: newContact => dispatch(operation.addContact(newContact)),\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import { Component } from 'react';\r\nimport * as operations from './redux/contact-operations';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Components/styles.css';\r\nimport ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\nimport Form from './Components/addForm';\r\n\r\nclass App extends Component {\r\n   state = {};\r\n   componentDidMount() {\r\n      this.props.fetchContacts();\r\n   }\r\n   render() {\r\n      return (\r\n         <div className=\"phonebook\">\r\n            <h1 className=\"phonebook__titel\"> Phonebook</h1>\r\n            <Form />\r\n            <h2> Contacts List</h2>\r\n            <Filter />\r\n            <ContactList />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      fetchContacts: () => dispatch(operations.fetchContacts()),\r\n   };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <Provider store={store}>\n         <App />\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById('root'),\n);\n"],"sourceRoot":""}